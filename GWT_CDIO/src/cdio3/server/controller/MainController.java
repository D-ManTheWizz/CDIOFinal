package cdio3.server.controller;

import java.util.Iterator;


public class MainController {
	
	public MainController() {

	}

	/* 
	*/

	/*
	*/
	
	/* 
	*/
	private boolean validatePassword(int oprID, String password) /*throws DALException*/ {
		return true;
	}
	
	/*
	 */
	private void createOperator() /*throws DALException*/ {

		String oprFirstName = null;
		String oprLastName = null;		
		String oprCpr = null;
		
		// make oprName from the first and last name
		String oprName = oprFirstName + " " + oprLastName;
		// make 4 char initials, from the first two char in first name and last name
		String ini = oprFirstName.substring(0, 2) + oprLastName.substring(0, 2);
		
//		// iterating through the list of Operators to check if an Operator with this cpr already exist.
//		for (Iterator<OperatorDTO> oprIter = oDAO.getOperatorList().listIterator(); oprIter.hasNext(); ) {
//		    OperatorDTO operator = oprIter.next();
				    
//		    if (operator.getCpr().contains(oprCpr)) {
//				UI.getInput();
//				adminMenu();	        
//		    } 
//		}	
//		oDAO.createOperator(oprName, ini, oprCpr);    	
//		/*
//		 * iterating through the list of Operators, finding the newly created operator, using the cpr. to
//		 * get the password and ID for displaying, and asking the admin to confirm.
//		 * (we can't use getOperator(opID); as the ID is autogenerated in OperatorDAO, so we iterate).
//		 */
//    	for (Iterator<OperatorDTO> oprIterForPassAndID = oDAO.getOperatorList().listIterator(); oprIterForPassAndID.hasNext(); ) {
//		    OperatorDTO operatorPassID = oprIterForPassAndID.next();		    
//		    if (operatorPassID.getCpr() == oprCpr) {		    		    
//    	}		    	
	}
	
	// if the admin choose to change some oprInfo, he will be asked what info to change
	private void changeOprInfo() /*throws DALException*/ {
		String choiceString = null;
		
//		if(choiceString.equals("1") || choiceString.equals("2") || choiceString.equals("3")) {
//
//			int choice = Integer.parseInt(choiceString);
//			
//			switch (choice) {
//			
//				case 1: 	changeOprName(); // prompt for valid ID
//				
//				case 2:		changeOprCpr(); // prompt for valid ID
//				
//				case 3:		adminMenu();
//			
//			}
//			
//		} else {
//			
//			UI.getInput();
//			changeOprInfo();
//			
//		}
	}
	
	/* 
	*/
	// deleting an Operator containing the ID the admin provides, confirming the deletion.
	private void deleteOprInfo() /*throws DALException*/ {
		
//		oDTO = oDAO.getOperator(Integer.parseInt(UI.getInput()));
//		if(oDTO == null) {	

//			UI.getInput();
//			adminMenu();			
//		}
		
//		// showing the Operator to be deleted
//		// deleting the operator IF, and only if, the admin confirm
//		if (UI.getInput().contains("yes")) {	
//			oDAO.deleteOperator((OperatorDTO) oDTO); 			
//		} else {	
//			adminMenu();		
//		}
	}
	
	/* 
	 * providing a valid oprID the operator can change his own password and will
	 * also be asked to confirm the new password, and/or returning to the mainMenu.
	 * The new password will not be checked if it "lives up to the standard".
	*/
	private void changePassword() /*throws DALException*/ {

		int oprID = 0;
		String password = null;
		String newPassword1 = null;	
		String newPassword2 = null;
		
		// check if the ID and password is correspondent
		if (validatePassword(oprID, password) == true) {
			
			// check if the new password is entered even two times
			if (newPassword1 == newPassword2) {
			
//				oDTO = oDAO.getOperator(oprID);
//				oDTO.setPassword(newPassword1);
//				oDAO.updateOperator((OperatorDTO) oDTO);

			} else {

//				changePassword();
				
			}			
		} else {
	
		}		
	}
	
	/* 
	*/
//	private void startWeight() throws DALException {
//		
//		controllerText.setWeightAskID();
//		
//		int oprID = Integer.parseInt(UI.getInput());
//		
//		controllerText.setWeightAskPass();
//		
//		String password = UI.getInput();
//		
//		if (validatePassword(oprID, password) == true) {
//			
//			controllerText.setWeightAskTare();
//			
//			double tareWeight = Integer.parseInt(UI.getInput());
//			
//			controllerText.setWeightAskGross();
//			
//			double grossWeight = Integer.parseInt(UI.getInput());
//			double netWeight = round(grossWeight-tareWeight);
//			
//			UI.showInput("                                         ");
//			UI.showInput("************** Weight Menu **************");
//			UI.showInput("|                                       |");
//			UI.showInput("|     Your net-weight is:  " + netWeight + "        |");
//			UI.showInput("|                                       |");
//			UI.showInput("| Enter \"exit\" to exit to the mani menu |");
//			UI.showInput("|                                       |");
//			UI.showInput("*****************************************");
//			UI.showInput("                                         ");
//			
//			
//			if(UI.getInput().equals("exit")) startMenu();
//			
//			startWeight();
//			
//		} else {
//			
//			controllerText.setWeightWrongID();
//			
//			UI.getInput();
//			startMenu();
//		}
//	}
	
	// round the weight to two digits
	private double round(double weight) {
		
		double rounded = (double) Math.round(weight * 100) / 100;
		
		return rounded;
		
	}
}
